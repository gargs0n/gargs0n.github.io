// breakpoint mixin
@mixin breakpoint($breakpoint) {
  @if (map-has-key($breakpoints, $breakpoint)) {
    @if (map-has-key(map-get($breakpoints, $breakpoint), min-height)) {
      @media (min-height: map-get(map-get($breakpoints, $breakpoint), min-height)){
        @media (min-width: map-get(map-get($breakpoints, $breakpoint), width)) {
          @content;
        }
      }
    }
    @else {
      @media (min-width: map-get(map-get($breakpoints, $breakpoint), width)) {
        @content;
      }
    }
  }
  @else {
    @warn "Breakpoint: " + $breakpoint + " is not defined";
  }
}

// browser vendor prefixng
@mixin prefix($prop, $val) {
  @each $prefix in '-webkit-', '-moz-', '-ms-', '' {
    #{$prefix}#{$prop}: $val;
  }
}

// the all mighty clearfix ;)
@mixin clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

// SCSS mixin to support vh and vw units on all iOS Safari versions
// @see: https://gist.github.com/BenMorel/e9e34c08360ebbbd0634
//
// Fix for vw, vh, vmin, vmax on iOS 7.
// http://caniuse.com/#feat=viewport-units
//
// This fix works by replacing viewport units with px values on known screen sizes.
//
// iPhone 6 and 6 Plus cannot run iOS 7, so are not targeted by this fix.
// Target devices running iOS 8+ will incidentally execute the media query,
// but this will still produce the expected result; so this is not a problem.
//
// As an example, replace:
//
//   height: 50vh;
//   font-size: 5vmin;
//
// with:
//
//   @include viewport-unit(height, 50vh);
//   @include viewport-unit(font-size, 5vmin);
//
@mixin viewport-unit($property, $value, $offset: 0px) {

  $unit: unit($value);
  $valueNumber : $value / ($value * 0 + 1);  // see https://github.com/sass/sass/issues/533
  $offsetNumber: $offset / ($offset * 0 + 1); // see https://github.com/sass/sass/issues/533


  @if ($offset < 0px){
    #{$property}:  if($offset != 0px, calc(#{$value} - #{abs($offset)}), $value);
  }
  @else {
    #{$property}:  if($offset != 0px, calc(#{$value} + #{abs($offset)}), $value);
  }


  @if (index((vw, vh, vmin, vmax), $unit) != null) {
    $devices: (
                    (768px, 1024px), // iPad (all versions)
                    (320px, 480px),  // iPhone 4
                    (320px, 568px)   // iPhone 5, 5C, 5S
    );

    @each $device in $devices {
      $device-width: nth($device, 1);
      $device-height: nth($device, 2);

      $device-query: "only screen and (-webkit-min-device-pixel-ratio: 1)";
      $device-query: "#{$device-query} and (device-width: #{$device-width})";
      $device-query: "#{$device-query} and (device-height: #{$device-height})";

      $percent-width: $device-width * $valueNumber / 100;
      $percent-height: $device-height * $valueNumber / 100;

      $percent-width: if($offset < 0px, $percent-width - abs($offset), $percent-width + abs($offset));
      $percent-height: if($offset < 0px, $percent-height - abs($offset), $percent-height + abs($offset));

      @if ($unit == vmin or $unit == vmax) {
        @media #{$device-query} {
          #{$property}: if($unit == vmin, $percent-width, $percent-height);
        }
      }
      @else {
        @media #{$device-query} and (orientation: portrait) {
          #{$property}: if($unit == vw, $percent-width, $percent-height);
        }

        @media #{$device-query} and (orientation: landscape) {
          #{$property}: if($unit == vw, $percent-height, $percent-width);
        }
      }
    }
  }
}